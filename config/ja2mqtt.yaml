# -*- coding: utf-8 -*-
# @author: Tomas Vitvar, https://vitvar.com, tomas@vitvar.com
# ja2mqtt definition file for JA121-T BUS RS-485 protocol
# You normally do not need to edit this file unless you want to change the way how JA121 protocol is implemented.
# The file uses Jinja templates and data from the yaml configuration file that defines Jablotron topology

# ja2mqtt schema version
version: "1.0"

system:
  # name of the propery for the correlation id in request payloads
  # the id will be copied from requests and copied to responses
  # when the correlation_id field is not present in request payload, no correlation will be done
  correlation_id: 'corrid'

  # correlation timeout in seconds
  # when a mqtt request is received, then within this timeout the response must be collected
  # the request-response will then share the same correlation id
  correlation_timeout: 2

  # number of bits in prfstate (default: 128)
  prfstate_bits: 24

  # prefix for all topics (default: ja2mqtt); if there are multiple instances of ja2mqtt using the same
  # MQTT broker, this property can be used to distinguish among them
  topic_prefix: ja2mqtt

# Definition of MQTT topics for serial output.
# The topics defined in `serial2mqtt` will be created in MQTT broker according to events that occur in the serial output
serial2mqtt:

# MQTT heartbeat topic; Jablotron writes hearbeat 'OK' messages to serial output
# that are converted to MQTT heartbeat events
- name: heartbeat
  disabled: True
  rules:
  - read: OK
    write:
      heartbeat: !py data

    # disable correlation for this rule
    no_correlation: True

# MQTT topics for sections that will be generated when events in serial output occur
{% for s in topology.section %}
- name: section/{{ s.name }}
  rules:
  #- read: !py pattern('STATE {{ s.code }} (READY|ARMED_PART|ARMED|SERVICE|BLOCKED|OFF)')
  - read: !py section_state('STATE ({{ s.code }}) (READY|ARMED_PART|ARMED|SERVICE|BLOCKED|OFF)',1,2)
    write:
      section_code: {{ s.code }}
      section_name: {{ s.name }}
      state: !py data.match.group(2)
      updated: !py data.updated
{% endfor %}

{% for v in topology.peripheral if v.type in ['motion','siren','magnet','smoke'] %}
- name: {{ v.type }}/{{ v.name }}
  rules:
  - read: !py prf_state_change({{ v['pos'] }})
    write:
      name: {{ v.name }}
      type: {{ v.type }}
      pos: {{ v.pos }}
      state: !py data.state
      updated: !py data.updated

    # allow to process next rule when this rule matches
    process_next_rule: True
{% endfor %}

# generic error
- name: error
  rules:
  - read: !py pattern('ERROR. ([0-9]+) (.+)')
    write:
      error_number: !py data.match.group(1)
      error_message: !py data.match.group(2)

# generic response to events with OK result
# this happens, for example, when a state of a section is not changed
- name: response
  rules:
  - read: OK
    write:
      data: !py data

    # send this event only if there is a request within the correlation_timeout
    require_request: True

# Definition of MQTT topics for serial input.
# The topics defined in `mqtt2serial` will be consumed from MQTT
mqtt2serial:

# get all section states
- name: section/get
  rules:
    - read:
        pin: !py pattern("^[0-9]{4}$")
      write: !py format("{pin} STATE",pin=data.pin)
      request_ttl: 99

# get prfstate
- name: prfstate/get
  rules:
    - write: !py write_prf_state(reset=True)
      request_ttl: 128

# get states of all: sections, peripherals
- name: all/get
  rules:
    - write: !py write_prf_state(reset=True)
      request_ttl: 128
    - read:
        pin: !py pattern("^[0-9]{4}$")
      write: !py format("{pin} STATE",pin=data.pin)
      request_ttl: 99

{% for s in topology.section %}
# set state to ARMED for a single section
- name: section/{{ s.name }}/set
  rules:
    - read:
        pin: !py pattern("^[0-9]{4}$")
      write: !py format("{pin} SET {{ s.code }}",pin=data.pin)

# set state to ARMED_PART for a single section
- name: section/{{ s.name }}/setp
  rules:
    - read:
        pin: !py pattern("^[0-9]{4}$")
      write: !py format("{pin} SETP {{ s.code }}",pin=data.pin)

# unset a single section
- name: section/{{ s.name }}/unset
  rules:
    - read:
        pin: !py pattern("^[0-9]{4}$")
      write: !py format("{pin} UNSET {{ s.code }}",pin=data.pin)

# get state of a single section
- name: section/{{ s.name }}/get
  rules:
    - read:
        pin: !py pattern("^[0-9]{4}$")
      write: !py format("{pin} STATE {{ s.code }}",pin=data.pin)
{% endfor %}
